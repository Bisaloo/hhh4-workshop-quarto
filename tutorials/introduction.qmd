---
title: 'Tutorial 1: "sts" class and univariate hhh4()'
subtitle: 'Using data from the ECDC Surveillance Atlas of Infectious Diseases'
author: "Sebastian Meyer"
date: "23 March 2022"
output: prettydoc::html_pretty
---

```{r setup, include = FALSE, purl = FALSE}
knitr::opts_chunk$set(fig.align = "center", message = FALSE)
options(width = 100)
```

This tutorial illustrates how to import time series data as an `"sts"`
(surveillance time series) object as used by the R package
[**surveillance**](https://CRAN.R-project.org/package=surveillance).
As an example, we will import a
[(gzip-compressed) csv file](data/ECDC_surveillance_data_IMD.csv.gz)
downloaded from the
[ECDC Surveillance Atlas of Infectious Diseases](https://atlas.ecdc.europa.eu/).
It contains the monthly number of reported cases of invasive meningococcal
disease (IMD).

The code to import the raw data is already provided here and in the
[R script template](template.R) so that you don't lose time with this step
and can concentrate on the `sts()` and `hhh4()` exercises further below.

Before you start, here is what
[Wikipedia](https://en.wikipedia.org/wiki/Neisseria_meningitidis#Epidemiology)
says about the epidemiology of meningococcus, the bacterium causing IMD:

> It is spread through saliva and other respiratory secretions during
> coughing, sneezing, kissing, and chewing on toys. Inhalation of
> respiratory droplets from a carrier which may be someone who is
> themselves in the early stages of disease can transmit the bacteria.
> [...] The incubation period is short, from 2 to 10 days.


## Import count time series

This is how the first 3 lines of the csv file from ECDC look like:

```{r, echo = FALSE, purl = FALSE, comment = ''}
writeLines(readLines("data/ECDC_surveillance_data_IMD.csv.gz", 3))
```

<details><summary>Disclaimer (ECDC)</summary>
The views and opinions of the authors expressed herein do not necessarily state
or reflect those of the ECDC. The accuracy of the authors' statistical analysis
and the findings they report are not the responsibility of ECDC. ECDC is not
responsible for conclusions or opinions drawn from the data provided. ECDC is
not responsible for the correctness of the data and for data management, data
merging and data collation after provision of the data. ECDC shall not be held
liable for improper or incorrect use of the data.
</details>

The first step is to import the counts from the csv file and reshape the data
into the wide (matrix) format typically used for multivariate time series
and expected by `sts()` and basic `ts()`.

```{r import ECDC data}
ecdc_long <- read.csv("data/ECDC_surveillance_data_IMD.csv.gz",
                      na.strings = "-") # always important to know NA encoding!
## exclude aggregate counts
ecdc_long <- subset(ecdc_long, !RegionName %in% c("EU/EEA", "EU"))

## reshape from long to wide format of multivariate time series
ecdc <- reshape(ecdc_long[c("Time", "RegionCode", "NumValue")],
                direction = "wide", idvar = "Time", timevar = "RegionCode")
names(ecdc) <- sub("NumValue.", "", names(ecdc), fixed = TRUE)
row.names(ecdc) <- ecdc$Time; ecdc$Time <- NULL

head(ecdc)
tail(ecdc)

## exclude contries without data
ecdc <- ecdc[, colSums(!is.na(ecdc)) > 0]
```

Country codes are given in the
[Eurostat Glossary](https://ec.europa.eu/eurostat/statistics-explained/index.php?title=Glossary:Country_codes).


## Import population data

Population counts are needed to calculate incidence values. 
[Eurostat](https://ec.europa.eu/eurostat/) provides such data as table
"TPS00001"; we have downloaded the values for 2018 as a csv file.

```{r import population data}
popdata <- read.csv("data/Eurostat_population_2018.csv")
head(popdata, 3)
stopifnot(colnames(ecdc) %in% popdata$geo)
pop <- setNames(popdata$OBS_VALUE, popdata$geo)[colnames(ecdc)]
pop
```


## Import map

The `"sts"` class can be used without a supplementary map, but incorporating one
enables a spatial view of the data.
We retrieve a suitable GeoJSON dataset of administrative boundaries from
[Eurostat/GISCO](https://gisco-services.ec.europa.eu/distribution/v2/nuts/nuts-2021-files.html),
with Copyright (C) EuroGeographics.
The result of importing that dataset is available as [map.RData](data/map.RData)
(so as to avoid potential problems with system requirements for **sf**).

```{r import map, results = "hide"}
file_map <- "data/map.RData"
if (file.exists(file_map)) {
   load(file_map)
} else {
  library("sf")
  ## read NUTS1-level data from Eurostat/GISCO
  map1 <- st_read("https://gisco-services.ec.europa.eu/distribution/v2/nuts/geojson/NUTS_RG_60M_2021_4326_LEVL_1.geojson")
  ## omit French overseas regions for a more compact map
  map1 <- subset(map1, NUTS_ID != "FRY")
  ## union polygons by country
  map0 <- aggregate(map1[0], by = list(COUNTRY = map1$CNTR_CODE), FUN = sum)
  ## check that the map contains the country codes of colnames(ecdc)
  stopifnot(colnames(ecdc) %in% map0$COUNTRY)
  ## convert to "SpatialPolgons" for use with sts()
  row.names(map0) <- map0$COUNTRY  # to match with colnames(ecdc)
  library("sp")
  map <- geometry(as_Spatial(map0))
  save(map, file = file_map, compress = "xz")
}
```

```{r map_plot, out.width = "100%", fig.crop = TRUE}
library("sp")
par(mar = c(0,0,0,0))
plot(map)
```


## Create an "sts" object

Using the above ingredients (`ecdc`, `pop`, `map`),
we can now create an `"sts"` object via `sts()`.

```{r create an sts object}
library("surveillance")

## start of the monthly time series
(start <- as.numeric(strsplit(rownames(ecdc)[1], split="-")[[1]]))

## IMD0 <- sts(....)  # see help("sts")
```

<details><summary>solution</summary>
```{r, purl = FALSE}
IMD0 <- sts(ecdc, start = start, frequency = 12, # monthly data
            population = pop, map = map)
```
</details>

```{r, include = FALSE, purl = FALSE}
save(IMD0, file = "IMD0.RData", compress = "xz")
```


---

Plot the (aggregated) count time series. Which problem do you notice?

<details><summary>solution</summary>
```{r, purl = FALSE}
plot(IMD0, type = observed ~ time)
## the time series obviously contains missing values

## ggplot2 version:
autoplot.sts(aggregate(IMD0, by = "unit"))
```
</details>

---

To keep things simple, we restrict the remaining exercises to a subset of
the countries:

```{r subset of countries}
IMD <- IMD0[, grep("^[ADFNU]", colnames(IMD0))]
```


## Visualizations

```{r plotting, include = FALSE}
##
## ... use the plot() method or autoplot.sts() ...
##
```

### observed ~ time

Plot the overall and country-specific count time series,
using either the conventional plot method or `autoplot.sts()`
(requires **ggplot2**).
The latter has an argument to plot incidences instead of counts.

<details><summary>solution</summary>
```{r, purl = FALSE}
## count time series
plot(IMD, type = observed ~ time)  # overall
plot(IMD)
autoplot.sts(IMD)

## incidence time series (per 100'000 inhabitants)
autoplot.sts(IMD, population = 100000)
```
</details>

---

### observed ~ unit

Produce a map with the country-specific cumulative number of cases (or
incidence) over time.  See `help("stsplot_space")` for options.

<details><summary>solution</summary>
```{r, purl = FALSE}
plot(IMD, type = observed ~ unit)

## cumulative incidence (per 100'000 inhabitants),
## using some of the graphical options
plot(IMD, type = observed ~ unit, population = 100000,
     col.regions = hcl.colors(100, rev = TRUE),
     gpar.missing = list(lty = 1, col = 8),
     col = "white", lwd = 2,
     sub = "cumulative incidence (per 100'000 inhabitants)")
```
</details>

---

### Plot via conversion to other data classes

`"sts"` objects can be converted to

- the basic `"ts"` class via `as.ts()`,

- the [**xts**](https://CRAN.R-project.org/package=xts) format via `as.xts.sts()`,

- a "tidy" (long) `data.frame` via `tidy.sts()` that can be used as input
for, e.g.,
[**ggplot2**](https://CRAN.R-project.org/package=ggplot2) or
[**lattice**](https://CRAN.R-project.org/package=lattice).


Try to produce some alternative plots of the time series.

<details><summary>solution</summary>
```{r, purl = FALSE}
## basic "ts"
plot(as.ts(IMD), las = 1, type = "h")  # note the varying y-axes

## "xts"
library("xts")
plot(as.xts(IMD), multi.panel = TRUE, yaxis.same = FALSE)

## "lattice"
str(IMDDF <- tidy.sts(IMD))
library("lattice")
xyplot(observed ~ date | unit, data = IMDDF, type = "h", as.table = TRUE)

## "ggplot2"
library("ggplot2")
ggplot(IMDDF, aes(x = date, y = observed)) + geom_col() + facet_wrap(~ unit)
```
</details>

---

## Univariate `hhh4()` modelling exercise

### Introduction

We will now estimate simple, univariate `hhh4()` models for the
IMD time series from France:

```{r IMD1}
IMD1 <- IMD[,"FR"]
plot(IMD1)

## plot yearly time series to investigate seasonality, here using "lattice"
library("lattice")
xyplot(observed ~ factor(epochInYear), data = tidy.sts(IMD1),
       groups = year, type = "l", xlab = "month")
```

Seasonality can be captured by including transformations of time
(sine-cosine terms) as covariates in the model.

With monthly data, we will miss some of the infection dynamics and
essentially aggregate over two generations. On the other hand, including a
single lag as in the original formulation of the observation-driven `hhh4`
model seems sufficient.

In statistical terms, we will fit simple models of the form

$$
Y_t | Y_{t-1} \sim \operatorname{NegBin}(\lambda_t y_{t-1} + \nu_t, \phi)
$$

where the log-linear predictors $\lambda_t$ (`ar`) and $\nu_t$ (`end`)
could both use the regression formula

```{r regression formula, eval = FALSE}
addSeason2formula(~ t, S = s, period = 12)
```

with `s` being the number of harmonics (each harmonic needing two
parameters, amplitude and shift). In mathematical notation, this amounts to
log-linear predictors of the form

$$
\alpha + \beta t +
\sum_{s=1}^S \left\{ \gamma_s \sin(s \omega t) +
                     \delta_s \cos(s \omega t) \right\}
$$

with fundamental frequency $\omega=2\pi/12$.


### Tasks

1. Estimate a few `hhh4()` models of the above form (with or without
   trend) and compare them using `AIC()` (Akaike Information Criterion).
   Note that you can easily estimate a new model with an updated number of
   harmonics and dropped AR trend from a previous model fit:
   
```{r convenient model updates, eval = FALSE}
fit2 <- update(fit1, ar = list(f = ~ 1), S = list(ar = 2, end = 2))
```

2. Plot the fitted time series and the estimated seasonal curves of
   one or more useful models.
   
3. Use `oneStepAhead()` to run rolling monthly forecasts over
   the last two years and `plot()` the result. You could also look at a
   `pit()` histogram of these probabilistic forecasts.


<details><summary>solution</summary>
```{r, purl = FALSE}
## model 1 with time trend and single sinusoidal curve in both components
(form1 <- addSeason2formula(~t, S = 1, period = 12))
fit1 <- hhh4(IMD1, control = list(ar = list(f = form1),
                                  end = list(f = form1),
                                  family = "NegBin1"))
summary(fit1)

## for parameter interpretation:
summary(fit1, maxEV = TRUE, amplitudeShift = TRUE, idx2Exp = TRUE)

## model 2 without time trends
form2 <- addSeason2formula(~1, S = 1, period = 12)
fit2 <- hhh4(IMD1, control = list(ar = list(f = form2),
                                  end = list(f = form2),
                                  family = "NegBin1"))
summary(fit2, maxEV = TRUE, amplitudeShift = TRUE, idx2Exp = TRUE)
AIC(fit1, fit2)

## model 3 with two harmonics
fit3 <- update(fit2, S = list(ar = 2, end = 2))
AIC(fit2, fit3)

## fitted values and estimated seasonality
plot(fit3)
plot(fit3, type = "season")

## compute rolling monthly forecasts
osa <- oneStepAhead(fit3, nrow(IMD1) - 2*52, verbose = interactive())
plot(osa)
head(quantile(osa))  # for prediction intervals
pit(osa)  # model tends to overpredict
```
</details>
